// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Boggle.BDD
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Boggle")]
    public partial class BoggleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BoggleFeatures.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Boggle", "\tIn Order to play the game Boggle \r\n\tAs a boggle player \r\n\tI want to be able to s" +
                    "ubmit answers and have my score calculated", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "WordLength",
                        "Score"});
            table1.AddRow(new string[] {
                        "3",
                        "1"});
            table1.AddRow(new string[] {
                        "4",
                        "1"});
            table1.AddRow(new string[] {
                        "5",
                        "2"});
            table1.AddRow(new string[] {
                        "6",
                        "3"});
            table1.AddRow(new string[] {
                        "7",
                        "5"});
            table1.AddRow(new string[] {
                        "8",
                        "11"});
            table1.AddRow(new string[] {
                        "9",
                        "11"});
            table1.AddRow(new string[] {
                        "10",
                        "11"});
            table1.AddRow(new string[] {
                        "11",
                        "11"});
            table1.AddRow(new string[] {
                        "12",
                        "11"});
            table1.AddRow(new string[] {
                        "13",
                        "11"});
            table1.AddRow(new string[] {
                        "14",
                        "11"});
            table1.AddRow(new string[] {
                        "15",
                        "11"});
            table1.AddRow(new string[] {
                        "16",
                        "11"});
            table1.AddRow(new string[] {
                        "17",
                        "11"});
#line 7
testRunner.Given("a scoring table that looks like:", ((string)(null)), table1, "Given ");
#line 24
testRunner.And("a valid word list at \"ValidWords.txt\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User enters a correct word and gets a score")]
        public virtual void UserEntersACorrectWordAndGetsAScore()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User enters a correct word and gets a score", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
#line 27
 testRunner.Given("a boggle grid that looks like:", "[a,b,c,d,\r\n e,f,g,h,\r\n i,h,k,l,\r\n m,n,o,p]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.When("a user enters the word \"cafe\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 35
 testRunner.Then("they score 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User enters a number of correct words and gets a score")]
        public virtual void UserEntersANumberOfCorrectWordsAndGetsAScore()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User enters a number of correct words and gets a score", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
#line 38
 testRunner.Given("a boggle grid that looks like:", "[b,t,l,k,\r\n h,r,t,d,\r\n e,c,v,x,\r\n j,d,l,e]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Word"});
            table2.AddRow(new string[] {
                        "herd"});
            table2.AddRow(new string[] {
                        "heed"});
            table2.AddRow(new string[] {
                        "bleed"});
            table2.AddRow(new string[] {
                        "led"});
            table2.AddRow(new string[] {
                        "deed"});
            table2.AddRow(new string[] {
                        "bee"});
            table2.AddRow(new string[] {
                        "reed"});
#line 45
 testRunner.When("a user enters the words:", ((string)(null)), table2, "When ");
#line 54
 testRunner.Then("they score 16", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User enters a mixture of correct and incorrect words and is only given a score fo" +
            "r the correct words")]
        public virtual void UserEntersAMixtureOfCorrectAndIncorrectWordsAndIsOnlyGivenAScoreForTheCorrectWords()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User enters a mixture of correct and incorrect words and is only given a score fo" +
                    "r the correct words", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
#line 57
 testRunner.Given("a boggle grid that looks like:", "[i,i,d,i,\r\n k,r,e,a,\r\n m,o,e,e,\r\n d,p,l,u]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Word"});
            table3.AddRow(new string[] {
                        "mole"});
            table3.AddRow(new string[] {
                        "read"});
            table3.AddRow(new string[] {
                        "red"});
            table3.AddRow(new string[] {
                        "kreed"});
            table3.AddRow(new string[] {
                        "pole"});
            table3.AddRow(new string[] {
                        "pule"});
            table3.AddRow(new string[] {
                        "dope"});
            table3.AddRow(new string[] {
                        "dreaped"});
            table3.AddRow(new string[] {
                        "leaped"});
            table3.AddRow(new string[] {
                        "reaped"});
#line 64
 testRunner.When("a user enters the words:", ((string)(null)), table3, "When ");
#line 76
 testRunner.Then("they score 19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User gets a board with the letter Q, which is represented by Qu in Boggle, enters" +
            " correct words and gets a score")]
        public virtual void UserGetsABoardWithTheLetterQWhichIsRepresentedByQuInBoggleEntersCorrectWordsAndGetsAScore()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User gets a board with the letter Q, which is represented by Qu in Boggle, enters" +
                    " correct words and gets a score", ((string[])(null)));
#line 78
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
#line 79
 testRunner.Given("a boggle grid that looks like:", "[y,b,u,w,\r\n u,e,i,Qu,\r\n a,r,v,y,\r\n x,m,e,r]", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Word"});
            table4.AddRow(new string[] {
                        "queue"});
            table4.AddRow(new string[] {
                        "arrive"});
            table4.AddRow(new string[] {
                        "mire"});
            table4.AddRow(new string[] {
                        "qua"});
#line 86
 testRunner.When("a user enters the words:", ((string)(null)), table4, "When ");
#line 92
 testRunner.Then("they score 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
